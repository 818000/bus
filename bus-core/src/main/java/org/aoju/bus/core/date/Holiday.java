/*********************************************************************************
 *                                                                               *
 * The MIT License (MIT)                                                         *
 *                                                                               *
 * Copyright (c) 2015-2020 aoju.org and other contributors.                      *
 *                                                                               *
 * Permission is hereby granted, free of charge, to any person obtaining a copy  *
 * of this software and associated documentation files (the "Software"), to deal *
 * in the Software without restriction, including without limitation the rights  *
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     *
 * copies of the Software, and to permit persons to whom the Software is         *
 * furnished to do so, subject to the following conditions:                      *
 *                                                                               *
 * The above copyright notice and this permission notice shall be included in    *
 * all copies or substantial portions of the Software.                           *
 *                                                                               *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, *
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     *
 * THE SOFTWARE.                                                                 *
 *                                                                               *
 ********************************************************************************/
package org.aoju.bus.core.date;

import org.aoju.bus.core.lang.Fields;
import org.aoju.bus.core.lang.Normal;
import org.aoju.bus.core.lang.Symbol;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * 节假日
 *
 * @author Kimi Liu
 * @version 6.1.6
 * @since JDK 1.8+
 */
public class Holiday {

    /**
     * 数据段长度
     */
    private static final int SIZE = 18;

    /**
     * 默认节假日数据，日期YYYYMMDD+名称下标+是否调休+对应节日YYYYMMDD
     */
    private static final String DATA = "2001122900200201012001123000200201012002010101200201012002010201200201012002010301" +
            "2002010120020209102002021220020210102002021220020212112002021220020213112002021220020214112002021220020215112" +
            "0020212200202161120020212200202171120020212200202181120020212200204273020020501200204283020020501200205013120" +
            "0205012002050231200205012002050331200205012002050431200205012002050531200205012002050631200205012002050731200" +
            "2100120020928602002100120020929602002100120021001612002100120021002612002100120021003612002100120021004612002" +
            "1001200210056120021001200210066120021001200210076120021001200301010120030101200302011120030201200302021120030" +
            "2012003020311200302012003020411200302012003020511200302012003020611200302012003020711200302012003020810200302" +
            "0120030209102003020120030426302003050120030427302003050120030501312003050120030502312003050120030503312003050" +
            "1200305043120030501200305053120030501200305063120030501200305073120031001200309276020031001200309286020031001" +
            "2003100161200310012003100261200310012003100361200310012003100461200310012003100561200310012003100661200310012" +
            "0031007612003100120040101012004010120040117102004012220040118102004012220040122112004012220040123112004012220" +
            "0401241120040122200401251120040122200401261120040122200401271120040122200401281120040122200405013120040501200" +
            "4050231200405012004050331200405012004050431200405012004050531200405012004050631200405012004050731200410012004" +
            "0508302004050120040509302004050120041001612004100120041002612004100120041003612004100120041004612004100120041" +
            "0056120041001200410066120041001200410076120041001200410096020041001200410106020041001200501010120050101200501" +
            "0201200501012005010301200501012005020510200502092005020610200502092005020911200502092005021011200502092005021" +
            "1112005020920050212112005020920050213112005020920050214112005020920050215112005020920050430302005050120050501" +
            "3120050501200505023120050501200505033120050501200505043120050501200505053120050501200505063120050501200505073" +
            "1200510012005050830200505012005100161200510012005100261200510012005100361200510012005100461200510012005100561" +
            "2005100120051006612005100120051007612005100120051008602005100120051009602005100120051231002006010120060101012" +
            "0060101200601020120060101200601030120060101200601281020060129200601291120060129200601301120060129200601311120" +
            "0601292006020111200601292006020211200601292006020311200601292006020411200601292006020510200601292006042930200" +
            "6050120060430302006050120060501312006050120060502312006050120060503312006050120060504312006050120060505312006" +
            "0501200605063120060501200605073120061001200609306020061001200610016120061001200610026120061001200610036120061" +
            "0012006100461200610012006100561200610012006100661200610012006100761200610012006100860200610012006123000200701" +
            "0120061231002007010120070101012007010120070102012007010120070103012007010120070217102007021820070218112007021" +
            "8200702191120070218200702201120070218200702211120070218200702221120070218200702231120070218200702241120070218" +
            "2007022510200702182007042830200705012007042930200705012007050131200705012007050231200705012007050331200705012" +
            "0070504312007050120070505312007050120070506312007050120070507312007050120070929602007100120070930602007100120" +
            "0710016120071001200710026120071001200710036120071001200710046120071001200710056120071001200710066120071001200" +
            "7100761200710012007122900200801012007123001200801012007123101200801012008010101200801012008020210200802062008" +
            "0203102008020620080206112008020620080207112008020620080208112008020620080209112008020620080210112008020620080" +
            "2111120080206200802121120080206200804042120080404200804052120080404200804062120080404200805013120080501200805" +
            "0231200805012008050331200805012008050430200805012008060741200806082008060841200806082008060941200806082008091" +
            "3512008091420080914512008091420080915512008091420080927602008100120080928602008100120080929612008100120080930" +
            "6120081001200810016120081001200810026120081001200810036120081001200810046120081001200810056120081001200901010" +
            "1200901012009010201200901012009010301200901012009010400200901012009012410200901252009012511200901252009012611" +
            "2009012520090127112009012520090128112009012520090129112009012520090130112009012520090131112009012520090201102" +
            "0090125200904042120090404200904052120090404200904062120090404200905013120090501200905023120090501200905033120" +
            "0905012009052841200905282009052941200905282009053041200905282009053140200905282009092760200910012009100161200" +
            "9100120091002612009100120091003612009100120091004612009100120091005512009100320091006512009100320091007512009" +
            "1003200910085120091003200910105020091003201001010120100101201001020120100101201001030120100101201002131120100" +
            "2132010021411201002132010021511201002132010021611201002132010021711201002132010021811201002132010021911201002" +
            "1320100220102010021320100221102010021320100403212010040520100404212010040520100405212010040520100501312010050" +
            "1201005023120100501201005033120100501201006124020100616201006134020100616201006144120100616201006154120100616" +
            "2010061641201006162010091950201009222010092251201009222010092351201009222010092451201009222010092550201009222" +
            "0100926602010100120101001612010100120101002612010100120101003612010100120101004612010100120101005612010100120" +
            "1010066120101001201010076120101001201010096020101001201101010120110101201101020120110101201101030120110101201" +
            "1013010201102032011020211201102032011020311201102032011020411201102032011020511201102032011020611201102032011" +
            "0207112011020320110208112011020320110212102011020320110402202011040520110403212011040520110404212011040520110" +
            "4052120110405201104303120110501201105013120110501201105023120110501201106044120110606201106054120110606201106" +
            "0641201106062011091051201109122011091151201109122011091251201109122011100161201110012011100261201110012011100" +
            "3612011100120111004612011100120111005612011100120111006612011100120111007612011100120111008602011100120111009" +
            "6020111001201112310020120101201201010120120101201201020120120101201201030120120101201201211020120123201201221" +
            "1201201232012012311201201232012012411201201232012012511201201232012012611201201232012012711201201232012012811" +
            "2012012320120129102012012320120331202012040420120401202012040420120402212012040420120403212012040420120404212" +
            "0120404201204283020120501201204293120120501201204303120120501201205013120120501201205023020120501201206224120" +
            "1206232012062341201206232012062441201206232012092950201209302012093051201209302012100161201210012012100261201" +
            "2100120121003612012100120121004612012100120121005612012100120121006612012100120121007612012100120121008602012" +
            "1001201301010120130101201301020120130101201301030120130101201301050020130101201301060020130101201302091120130" +
            "2102013021011201302102013021111201302102013021211201302102013021311201302102013021411201302102013021511201302" +
            "1020130216102013021020130217102013021020130404212013040420130405212013040420130406212013040420130427302013050" +
            "1201304283020130501201304293120130501201304303120130501201305013120130501201306084020130612201306094020130612" +
            "2013061041201306122013061141201306122013061241201306122013091951201309192013092051201309192013092151201309192" +
            "0130922502013091920130929602013100120131001612013100120131002612013100120131003612013100120131004612013100120" +
            "1310056120131001201310066120131001201310076120131001201401010120140101201401261020140131201401311120140131201" +
            "4020111201401312014020211201401312014020311201401312014020411201401312014020511201401312014020611201401312014" +
            "0208102014013120140405212014040520140406212014040520140407212014040520140501312014050120140502312014050120140" +
            "5033120140501201405043020140501201405314120140602201406014120140602201406024120140602201409065120140908201409" +
            "0751201409082014090851201409082014092860201410012014100161201410012014100261201410012014100361201410012014100" +
            "4612014100420141005612014100120141006612014100120141007612014100120141011602014100120150101012015010120150102" +
            "0120150101201501030120150101201501040020150101201502151020150219201502181120150219201502191120150219201502201" +
            "1201502192015022111201502192015022211201502192015022311201502192015022411201502192015022810201502192015040421" +
            "2015040520150405212015040520150406212015040520150501312015050120150502312015050120150503312015050120150620412" +
            "0150620201506214120150620201506224120150620201509038120150903201509048120150903201509058120150903201509068020" +
            "1509032015092651201509272015092751201509272015100161201510012015100261201510012015100361201510012015100461201" +
            "5100420151005612015100120151006612015100120151007612015100120151010602015100120160101012016010120160102012016" +
            "0101201601030120160101201602061020160208201602071120160208201602081120160208201602091120160208201602101120160" +
            "2082016021111201602082016021211201602082016021311201602082016021410201602082016040221201604042016040321201604" +
            "0420160404212016040420160430312016050120160501312016050120160502312016050120160609412016060920160610412016060" +
            "9201606114120160609201606124020160609201609155120160915201609165120160915201609175120160915201609185020160915" +
            "2016100161201610012016100261201610012016100361201610012016100461201610042016100561201610012016100661201610012" +
            "0161007612016100120161008602016100120161009602016100120161231012017010120170101012017010120170102012017010120" +
            "1701221020170128201701271120170128201701281120170128201701291120170128201701301120170128201701311120170128201" +
            "7020111201701282017020211201701282017020410201701282017040120201704042017040221201704042017040321201704042017" +
            "0404212017040420170429312017050120170430312017050120170501312017050120170527402017053020170528412017053020170" +
            "5294120170530201705304120170530201709306020171001201710016120171001201710026120171001201710036120171001201710" +
            "0451201710042017100561201710012017100661201710012017100761201710012017100861201710012017123001201801012017123" +
            "1012018010120180101012018010120180211102018021620180215112018021620180216112018021620180217112018021620180218" +
            "1120180216201802191120180216201802201120180216201802211120180216201802241020180216201804052120180405201804062" +
            "1201804052018040721201804052018040820201804052018042830201805012018042931201805012018043031201805012018050131" +
            "2018050120180616412018061820180617412018061820180618412018061820180922512018092420180923512018092420180924512" +
            "0180924201809296020181001201809306020181001201810016120181001201810026120181001201810036120181001201810046120" +
            "1810012018100561201810012018100661201810012018100761201810012018122900201901012018123001201901012018123101201" +
            "9010120190101012019010120190202102019020520190203102019020520190204112019020520190205112019020520190206112019" +
            "0205201902071120190205201902081120190205201902091120190205201902101120190205201904052120190405201904062120190" +
            "4052019040721201904052019042830201905012019050131201905012019050231201905012019050331201905012019050431201905" +
            "0120190505302019050120190607412019060720190608412019060720190609412019060720190913512019091320190914512019091" +
            "3201909155120190913201909296020191001201910016120191001201910026120191001201910036120191001201910046120191001" +
            "2019100561201910012019100661201910012019100761201910012019101260201910012020010101202001012020011910202001252" +
            "0200124112020012520200125112020012520200126112020012520200127112020012520200128112020012520200129112020012520" +
            "2001301120200125202001311120200125202002011120200125202002021120200125202004042120200404202004052120200404202" +
            "0040621202004042020042630202005012020050131202005012020050231202005012020050331202005012020050431202005012020" +
            "0505312020050120200509302020050120200625412020062520200626412020062520200627412020062520200628402020062520200" +
            "9277020201001202010017120201001202010026120201001202010036120201001202010046120201001202010056120201001202010" +
            "0661202010012020100761202010012020100861202010012020101060202010012021010101202101012021010201202101012021010" +
            "3012021010120210207102021021220210211112021021220210212112021021220210213112021021220210214112021021220210215" +
            "1120210212202102161120210212202102171120210212202102201020210212202104032120210404202104042120210404202104052" +
            "1202104042021042530202105012021050131202105012021050231202105012021050331202105012021050431202105012021050531" +
            "2021050120210508302021050120210612412021061420210613412021061420210614412021061420210918502021092120210919512" +
            "0210921202109205120210921202109215120210921202109266020211001202110016120211001202110026120211001202110036120" +
            "211001202110046120211001202110056120211001202110066120211001202110076120211001202110096020211001";

    /**
     * 使用的节假日名称
     */
    private static String[] NAMES_IN_USE = Fields.CN_HOLIDAY;
    /**
     * 使用的节假日数据
     */
    private static String DATA_IN_USE = DATA;
    /**
     * 日期，YYYY-MM-DD格式
     */
    private String day;
    /**
     * 名称，如：国庆
     */
    private String name;
    /**
     * 是否调休，即是否要上班
     */
    private boolean work;
    /**
     * 关联的节日，YYYY-MM-DD格式
     */
    private String target;

    public Holiday() {

    }

    /**
     * 初始化
     *
     * @param day    日期
     * @param name   名称
     * @param work   是否调休
     * @param target 关联的节日
     */
    public Holiday(String day, String name, boolean work, String target) {
        if (!day.contains(Symbol.HYPHEN)) {
            this.day = day.substring(0, 4) + Symbol.HYPHEN + day.substring(4, 6) + Symbol.HYPHEN + day.substring(6);
        } else {
            this.day = day;
        }
        this.name = name;
        this.work = work;
        if (!target.contains(Symbol.HYPHEN)) {
            this.target = target.substring(0, 4) + Symbol.HYPHEN + target.substring(4, 6) + Symbol.HYPHEN + target.substring(6);
        } else {
            this.target = target;
        }
    }

    private static String padding(int n) {
        return (n < 10 ? "0" : Normal.EMPTY) + n;
    }

    private static Holiday buildHolidayForward(String s) {
        String day = s.substring(0, 8);
        String name = NAMES_IN_USE[s.charAt(8) - Symbol.C_ZERO];
        boolean work = s.charAt(9) == Symbol.C_ZERO;
        String target = s.substring(10, SIZE);
        return new Holiday(day, name, work, target);
    }

    private static Holiday buildHolidayBackward(String s) {
        int size = s.length();
        String day = s.substring(size - 18, size - 10);
        String name = NAMES_IN_USE[s.charAt(size - 10) - Symbol.C_ZERO];
        boolean work = s.charAt(size - 9) == Symbol.C_ZERO;
        String target = s.substring(size - 8);
        return new Holiday(day, name, work, target);
    }

    private static String findForward(String key) {
        int start = DATA_IN_USE.indexOf(key);
        if (start < 0) {
            return null;
        }
        String right = DATA_IN_USE.substring(start);
        int n = right.length() % SIZE;
        if (n > 0) {
            right = right.substring(n);
        }
        while ((!right.startsWith(key)) && right.length() >= SIZE) {
            right = right.substring(SIZE);
        }
        return right;
    }

    private static String findBackward(String key) {
        int start = DATA_IN_USE.lastIndexOf(key);
        if (start < 0) {
            return null;
        }
        String left = DATA_IN_USE.substring(0, start + key.length());
        int size = left.length();
        int n = size % SIZE;
        if (n > 0) {
            left = left.substring(0, size - n);
        }
        size = left.length();
        while ((!left.endsWith(key)) && size >= SIZE) {
            left = left.substring(0, size - SIZE);
            size = left.length();
        }
        return left;
    }

    private static List<Holiday> findHolidaysForward(String key) {
        List<Holiday> l = new ArrayList<>();
        String s = findForward(key);
        if (null == s) {
            return l;
        }
        while (s.startsWith(key)) {
            l.add(buildHolidayForward(s));
            s = s.substring(SIZE);
        }
        return l;
    }

    private static List<Holiday> findHolidaysBackward(String key) {
        List<Holiday> l = new ArrayList<>();
        String s = findBackward(key);
        if (null == s) {
            return l;
        }
        while (s.endsWith(key)) {
            l.add(buildHolidayBackward(s));
            s = s.substring(0, s.length() - SIZE);
        }
        Collections.reverse(l);
        return l;
    }

    /**
     * 获取指定年月日的节假日信息，如果不存在，返回null
     *
     * @param year  年
     * @param month 月，1-12
     * @param day   日，1-31
     * @return 节假日
     */
    public static Holiday getHoliday(int year, int month, int day) {
        List<Holiday> l = findHolidaysForward(year + padding(month) + padding(day));
        return l.isEmpty() ? null : l.get(0);
    }

    /**
     * 获取指定年月日的节假日信息，如果不存在，返回null
     *
     * @param ymd 年月日
     * @return 节假日
     */
    public static Holiday getHoliday(String ymd) {
        List<Holiday> l = findHolidaysForward(ymd.replace(Symbol.HYPHEN, Normal.EMPTY));
        return l.isEmpty() ? null : l.get(0);
    }

    /**
     * 获取指定年月的节假日列表
     *
     * @param year  年
     * @param month 月，1-12
     * @return 节假日列表
     */
    public static List<Holiday> getHolidays(int year, int month) {
        return findHolidaysForward(year + padding(month));
    }

    /**
     * 获取指定年的节假日列表
     *
     * @param year 年
     * @return 节假日列表
     */
    public static List<Holiday> getHolidays(int year) {
        return findHolidaysForward(year + Normal.EMPTY);
    }

    /**
     * 获取指定年月日的节假日列表
     *
     * @param ymd 年、年月、年月日
     * @return 节假日列表
     */
    public static List<Holiday> getHolidays(String ymd) {
        return findHolidaysForward(ymd.replace(Symbol.HYPHEN, Normal.EMPTY));
    }

    /**
     * 获取指定节日（仅节日当天）的相关节假日列表
     *
     * @param ymd 年月日
     * @return 节假日列表
     */
    public static List<Holiday> getHolidaysByTarget(String ymd) {
        return findHolidaysBackward(ymd.replace(Symbol.HYPHEN, Normal.EMPTY));
    }

    /**
     * 获取指定节日（仅节日当天）的相关节假日列表
     *
     * @param year  年
     * @param month 月
     * @param day   日
     * @return 节假日列表
     */
    public static List<Holiday> getHolidaysByTarget(int year, int month, int day) {
        return findHolidaysBackward(year + padding(month) + padding(day));
    }

    /**
     * 修正或追加节假日数据。节假日名称下标从0开始，超过9的，按ASCII码表依次往后排列；调休标识0为上班，否则放假
     *
     * @param names 用于替换默认的节假日名称列表，传null即可使用默认名称
     * @param data  需要修正或追加的节假日数据，每18位表示1天依次排列，
     *              格式：当天年月日YYYYMMDD(8位)+节假日名称下标(1位)+调休标识(1位)+节假日当天YYYYMMDD(8位)
     *              例：202005023120200501代表2020-05-02为劳动节放假，对应节假日为2020-05-01
     */
    public static void fix(String[] names, String data) {
        if (null != names) {
            NAMES_IN_USE = names;
        }
        if (null == data) {
            return;
        }
        StringBuilder append = new StringBuilder();
        while (data.length() >= SIZE) {
            String segment = data.substring(0, SIZE);
            String day = segment.substring(0, 8);
            Holiday holiday = getHoliday(day);
            if (null == holiday) {
                append.append(segment);
            } else {
                int nameIndex = -1;
                for (int i = 0, j = NAMES_IN_USE.length; i < j; i++) {
                    if (NAMES_IN_USE[i].equals(holiday.getName())) {
                        nameIndex = i;
                        break;
                    }
                }
                if (nameIndex > -1) {
                    String old = day + (char) (nameIndex + Symbol.C_ZERO)
                            + (holiday.isWork() ? Symbol.C_ZERO : '1')
                            + holiday.getTarget().replace(Symbol.HYPHEN, Normal.EMPTY);
                    DATA_IN_USE = DATA_IN_USE.replace(old, segment);
                }
            }
            data = data.substring(SIZE);
        }
        if (append.length() > 0) {
            DATA_IN_USE += append.toString();
        }
    }

    /**
     * 使用默认的节假日名称来修正或追加节假日数据。节假日名称下标从0开始，
     * 最大为8(元旦节0，春节1，清明节2，劳动节3，端午节4，中秋节5，国庆节6，国庆中秋7，抗战胜利日8)；
     * 调休标识0为上班，否则放假
     *
     * @param data 需要修正或追加的节假日数据，每18位表示1天依次排列，
     *             格式：当天年月日YYYYMMDD(8位)+节假日名称下标(1位)+调休标识(1位)+节假日当天YYYYMMDD(8位)
     *             例：202005023120200501代表2020-05-02为劳动节放假，对应节假日为2020-05-01
     */
    public static void fix(String data) {
        fix(null, data);
    }

    /**
     * 获取日期
     *
     * @return 日期
     */
    public String getDays() {
        return day;
    }

    /**
     * 设置日期
     *
     * @param day 日期
     */
    public void setDays(String day) {
        this.day = day;
    }

    /**
     * 获取名称
     *
     * @return 名称
     */
    public String getName() {
        return name;
    }

    /**
     * 设置名称
     *
     * @param name 名称
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 是否调休
     *
     * @return true/false
     */
    public boolean isWork() {
        return work;
    }

    /**
     * 设置是否调休
     *
     * @param work true/false
     */
    public void setWork(boolean work) {
        this.work = work;
    }

    /**
     * 获取关联的节日
     *
     * @return 节日
     */
    public String getTarget() {
        return target;
    }

    /**
     * 设置关联的节日
     *
     * @param target 节日
     */
    public void setTarget(String target) {
        this.target = target;
    }

    @Override
    public String toString() {
        return day + Symbol.SPACE + name + (work ? "调休" : Normal.EMPTY) + Symbol.SPACE + target;
    }

}
