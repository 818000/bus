/*
 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
 ~                                                                               ~
 ~ The MIT License (MIT)                                                         ~
 ~                                                                               ~
 ~ Copyright (c) 2015-2024 miaixz.org and other contributors.                    ~
 ~                                                                               ~
 ~ Permission is hereby granted, free of charge, to any person obtaining a copy  ~
 ~ of this software and associated documentation files (the "Software"), to deal ~
 ~ in the Software without restriction, including without limitation the rights  ~
 ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     ~
 ~ copies of the Software, and to permit persons to whom the Software is         ~
 ~ furnished to do so, subject to the following conditions:                      ~
 ~                                                                               ~
 ~ The above copyright notice and this permission notice shall be included in    ~
 ~ all copies or substantial portions of the Software.                           ~
 ~                                                                               ~
 ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    ~
 ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      ~
 ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   ~
 ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        ~
 ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, ~
 ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     ~
 ~ THE SOFTWARE.                                                                 ~
 ~                                                                               ~
 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
*/
package org.miaixz.bus.image.galaxy.dict.GEMS_PETD_01;

/**
 * @author Kimi Liu
 * @since Java 17+
 */
public class PrivateKeyword {

    public static final String PrivateCreator = "";

    public static String valueOf(int tag) {

        switch (tag & 0xFFFF00FF) {
        case PrivateTag.ImplementationVersionName:
            return "ImplementationVersionName";
        case PrivateTag.PatientID:
            return "PatientID";
        case PrivateTag.PatientCompatibleVersion:
            return "PatientCompatibleVersion";
        case PrivateTag.PatientSoftwareVersion:
            return "PatientSoftwareVersion";
        case PrivateTag.PatientDateTime:
            return "PatientDateTime";
        case PrivateTag.PatientType:
            return "PatientType";
        case PrivateTag.ExamID:
            return "ExamID";
        case PrivateTag.ExamCompatibleVersion:
            return "ExamCompatibleVersion";
        case PrivateTag.ExamSoftwareVersion:
            return "ExamSoftwareVersion";
        case PrivateTag.ScanID:
            return "ScanID";
        case PrivateTag.ScanCompatibleVersion:
            return "ScanCompatibleVersion";
        case PrivateTag.ScanSoftwareVersion:
            return "ScanSoftwareVersion";
        case PrivateTag.ScanDateTime:
            return "ScanDateTime";
        case PrivateTag.ScanReady:
            return "ScanReady";
        case PrivateTag.ScanDescription:
            return "ScanDescription";
        case PrivateTag.HospitalName:
            return "HospitalName";
        case PrivateTag.ScannerDescription:
            return "ScannerDescription";
        case PrivateTag.Manufacturer:
            return "Manufacturer";
        case PrivateTag.FORIdentifier:
            return "FORIdentifier";
        case PrivateTag.LandmarkName:
            return "LandmarkName";
        case PrivateTag.LandmarkAbbrev:
            return "LandmarkAbbrev";
        case PrivateTag.PatientPosition:
            return "PatientPosition";
        case PrivateTag.ScanPerspective:
            return "ScanPerspective";
        case PrivateTag.ScanType:
            return "ScanType";
        case PrivateTag.ScanMode:
            return "ScanMode";
        case PrivateTag.StartCondition:
            return "StartCondition";
        case PrivateTag.StartConditionData:
            return "StartConditionData";
        case PrivateTag.SelStopCondition:
            return "SelStopCondition";
        case PrivateTag.SelStopConditionData:
            return "SelStopConditionData";
        case PrivateTag.CollectDeadtime:
            return "CollectDeadtime";
        case PrivateTag.CollectSingles:
            return "CollectSingles";
        case PrivateTag.CollectCountRate:
            return "CollectCountRate";
        case PrivateTag.CountRatePeriod:
            return "CountRatePeriod";
        case PrivateTag.DelayedEvents:
            return "DelayedEvents";
        case PrivateTag.DelayedBias:
            return "DelayedBias";
        case PrivateTag.WordSize:
            return "WordSize";
        case PrivateTag.AxialAcceptance:
            return "AxialAcceptance";
        case PrivateTag.AxialAngle3D:
            return "AxialAngle3D";
        case PrivateTag.ThetaCompression:
            return "ThetaCompression";
        case PrivateTag.AxialCompression:
            return "AxialCompression";
        case PrivateTag.GantryTiltAngle:
            return "GantryTiltAngle";
        case PrivateTag.Collimation:
            return "Collimation";
        case PrivateTag.ScanFOV:
            return "ScanFOV";
        case PrivateTag.AxialFOV:
            return "AxialFOV";
        case PrivateTag.EventSeparation:
            return "EventSeparation";
        case PrivateTag.MaskWidth:
            return "MaskWidth";
        case PrivateTag.BinningMode:
            return "BinningMode";
        case PrivateTag.TrigRejMethod:
            return "TrigRejMethod";
        case PrivateTag.NumberForReject:
            return "NumberForReject";
        case PrivateTag.LowerRejectLimit:
            return "LowerRejectLimit";
        case PrivateTag.UpperRejectLimit:
            return "UpperRejectLimit";
        case PrivateTag.TriggersAcquired:
            return "TriggersAcquired";
        case PrivateTag.TriggersRejected:
            return "TriggersRejected";
        case PrivateTag.TracerName:
            return "TracerName";
        case PrivateTag.BatchDescription:
            return "BatchDescription";
        case PrivateTag.TracerActivity:
            return "TracerActivity";
        case PrivateTag.MeasuredDateTime:
            return "MeasuredDateTime";
        case PrivateTag.PreInjVolume:
            return "PreInjVolume";
        case PrivateTag.AdministeredDateTime:
            return "AdministeredDateTime";
        case PrivateTag.PostInjectedActivity:
            return "PostInjectedActivity";
        case PrivateTag.PostInjectedDateTime:
            return "PostInjectedDateTime";
        case PrivateTag.RadioNuclideName:
            return "RadioNuclideName";
        case PrivateTag.HalfLife:
            return "HalfLife";
        case PrivateTag.PositronFraction:
            return "PositronFraction";
        case PrivateTag.Source1Holder:
            return "Source1Holder";
        case PrivateTag.Source1Activity:
            return "Source1Activity";
        case PrivateTag.Source1MeasDT:
            return "Source1MeasDT";
        case PrivateTag.Source1RadioNuclide:
            return "Source1RadioNuclide";
        case PrivateTag.Source1HalfLife:
            return "Source1HalfLife";
        case PrivateTag.Source2Holder:
            return "Source2Holder";
        case PrivateTag.Source2Activity:
            return "Source2Activity";
        case PrivateTag.Source2MeasDT:
            return "Source2MeasDT";
        case PrivateTag.Source2RadioNuclide:
            return "Source2RadioNuclide";
        case PrivateTag.Source2HalfLife:
            return "Source2HalfLife";
        case PrivateTag.SourceSpeed:
            return "SourceSpeed";
        case PrivateTag.SourceLocation:
            return "SourceLocation";
        case PrivateTag.EmissionPresent:
            return "EmissionPresent";
        case PrivateTag.LowerAxialAcc:
            return "LowerAxialAcc";
        case PrivateTag.UpperAxialAcc:
            return "UpperAxialAcc";
        case PrivateTag.LowerCoincLimit:
            return "LowerCoincLimit";
        case PrivateTag.UpperCoincLimit:
            return "UpperCoincLimit";
        case PrivateTag.CoincDelayOffset:
            return "CoincDelayOffset";
        case PrivateTag.CoincOutputMode:
            return "CoincOutputMode";
        case PrivateTag.UpperEnergyLimit:
            return "UpperEnergyLimit";
        case PrivateTag.LowerEnergyLimit:
            return "LowerEnergyLimit";
        case PrivateTag.NormalCalID:
            return "NormalCalID";
        case PrivateTag.Normal2DCalID:
            return "Normal2DCalID";
        case PrivateTag.BlankCalID:
            return "BlankCalID";
        case PrivateTag.WCCalID:
            return "WCCalID";
        case PrivateTag.Derived:
            return "Derived";
        case PrivateTag.ContrastAgent:
            return "ContrastAgent";
        case PrivateTag.frameid:
            return "frameid";
        case PrivateTag.scanid:
            return "scanid";
        case PrivateTag.examid:
            return "examid";
        case PrivateTag.patientid:
            return "patientid";
        case PrivateTag.compatibleversion:
            return "compatibleversion";
        case PrivateTag.softwareversion:
            return "softwareversion";
        case PrivateTag.whereisframe:
            return "whereisframe";
        case PrivateTag.framesize:
            return "framesize";
        case PrivateTag.fileexists:
            return "fileexists";
        case PrivateTag.patiententry:
            return "patiententry";
        case PrivateTag.tableheight:
            return "tableheight";
        case PrivateTag.tablezposition:
            return "tablezposition";
        case PrivateTag.landmarkdatetime:
            return "landmarkdatetime";
        case PrivateTag.slicecount:
            return "slicecount";
        case PrivateTag.startlocation:
            return "startlocation";
        case PrivateTag.acqdelay:
            return "acqdelay";
        case PrivateTag.acqstart:
            return "acqstart";
        case PrivateTag.acqduration:
            return "acqduration";
        case PrivateTag.acqbindur:
            return "acqbindur";
        case PrivateTag.acqbinstart:
            return "acqbinstart";
        case PrivateTag.actualstopcond:
            return "actualstopcond";
        case PrivateTag.totalprompts:
            return "totalprompts";
        case PrivateTag.totaldelays:
            return "totaldelays";
        case PrivateTag.framevalid:
            return "framevalid";
        case PrivateTag.validityinfo:
            return "validityinfo";
        case PrivateTag.archived:
            return "archived";
        case PrivateTag.compression:
            return "compression";
        case PrivateTag.uncompressedsize:
            return "uncompressedsize";
        case PrivateTag.accumbindur:
            return "accumbindur";
        case PrivateTag.ImageSetCompatibleVersion:
            return "ImageSetCompatibleVersion";
        case PrivateTag.ImageSetSoftwareVersion:
            return "ImageSetSoftwareVersion";
        case PrivateTag.ImageSetDateTime:
            return "ImageSetDateTime";
        case PrivateTag.ImageSetSource:
            return "ImageSetSource";
        case PrivateTag.ImageSetContents:
            return "ImageSetContents";
        case PrivateTag.ImageSetType:
            return "ImageSetType";
        case PrivateTag.ImageSetReference:
            return "ImageSetReference";
        case PrivateTag.MultiPatient:
            return "MultiPatient";
        case PrivateTag.NumberOfNormals:
            return "NumberOfNormals";
        case PrivateTag.ColorMapID:
            return "ColorMapID";
        case PrivateTag.WindowLevelType:
            return "WindowLevelType";
        case PrivateTag.Rotate:
            return "Rotate";
        case PrivateTag.Flip:
            return "Flip";
        case PrivateTag.Zoom:
            return "Zoom";
        case PrivateTag.PanX:
            return "PanX";
        case PrivateTag.PanY:
            return "PanY";
        case PrivateTag.WindowLevelMin:
            return "WindowLevelMin";
        case PrivateTag.WindowLevelMax:
            return "WindowLevelMax";
        case PrivateTag.ReconMethod:
            return "ReconMethod";
        case PrivateTag.Attenuation:
            return "Attenuation";
        case PrivateTag.AttenuationCoefficient:
            return "AttenuationCoefficient";
        case PrivateTag.BPFilter:
            return "BPFilter";
        case PrivateTag.BPFilterCutoff:
            return "BPFilterCutoff";
        case PrivateTag.BPFilterOrder:
            return "BPFilterOrder";
        case PrivateTag.BPFilterCenterI:
            return "BPFilterCenterI";
        case PrivateTag.BPFilterCenterP:
            return "BPFilterCenterP";
        case PrivateTag.AttenSmooth:
            return "AttenSmooth";
        case PrivateTag.AttenSmoothParam:
            return "AttenSmoothParam";
        case PrivateTag.AngleSmoothParam:
            return "AngleSmoothParam";
        case PrivateTag.WellCounterCalID:
            return "WellCounterCalID";
        case PrivateTag.TransScanID:
            return "TransScanID";
        case PrivateTag.NormCalID:
            return "NormCalID";
        case PrivateTag.BlnkCalID:
            return "BlnkCalID";
        case PrivateTag.CACEdgeThreshold:
            return "CACEdgeThreshold";
        case PrivateTag.CACSkullOffset:
            return "CACSkullOffset";
        case PrivateTag.EmissSubID:
            return "EmissSubID";
        case PrivateTag.RadialFilter3D:
            return "RadialFilter3D";
        case PrivateTag.RadialCutoff3D:
            return "RadialCutoff3D";
        case PrivateTag.AxialFilter3D:
            return "AxialFilter3D";
        case PrivateTag.AxialCutoff3D:
            return "AxialCutoff3D";
        case PrivateTag.AxialStart:
            return "AxialStart";
        case PrivateTag.AxialSpacing:
            return "AxialSpacing";
        case PrivateTag.AxialAnglesUsed:
            return "AxialAnglesUsed";
        case PrivateTag.slicenumber:
            return "slicenumber";
        case PrivateTag.totalcounts:
            return "totalcounts";
        case PrivateTag.otheratts:
            return "otheratts";
        case PrivateTag.otherattssize:
            return "otherattssize";
        case PrivateTag.bpcenterx:
            return "bpcenterx";
        case PrivateTag.bpcentery:
            return "bpcentery";
        case PrivateTag.transframeid:
            return "transframeid";
        case PrivateTag.tpluseframeid:
            return "tpluseframeid";
        case PrivateTag.profilespacing:
            return "profilespacing";
        case PrivateTag.IRNumIterations:
            return "IRNumIterations";
        case PrivateTag.IRNumSubsets:
            return "IRNumSubsets";
        case PrivateTag.IRReconFOV:
            return "IRReconFOV";
        case PrivateTag.IRCorrModel:
            return "IRCorrModel";
        case PrivateTag.IRLoopFilter:
            return "IRLoopFilter";
        case PrivateTag.IRPreFiltParam:
            return "IRPreFiltParam";
        case PrivateTag.IRLoopFiltParam:
            return "IRLoopFiltParam";
        case PrivateTag.ResponseFiltParam:
            return "ResponseFiltParam";
        case PrivateTag.PostFilter:
            return "PostFilter";
        case PrivateTag.PostFilterParam:
            return "PostFilterParam";
        case PrivateTag.IRRegularize:
            return "IRRegularize";
        case PrivateTag.IRRegularizeParam:
            return "IRRegularizeParam";
        case PrivateTag.ACBPFilter:
            return "ACBPFilter";
        case PrivateTag.ACBPFiltCutoff:
            return "ACBPFiltCutoff";
        case PrivateTag.ACBPFiltOrder:
            return "ACBPFiltOrder";
        case PrivateTag.ACImgSmooth:
            return "ACImgSmooth";
        case PrivateTag.ACImgSmoothParm:
            return "ACImgSmoothParm";
        case PrivateTag.ScatterMethod:
            return "ScatterMethod";
        case PrivateTag.ScatterNumIter:
            return "ScatterNumIter";
        case PrivateTag.ScatterParm:
            return "ScatterParm";
        case PrivateTag.segqcparm:
            return "segqcparm";
        case PrivateTag.overlap:
            return "overlap";
        case PrivateTag.ovlpfrmid:
            return "ovlpfrmid";
        case PrivateTag.ovlptransfrmid:
            return "ovlptransfrmid";
        case PrivateTag.ovlptpulsefrmid:
            return "ovlptpulsefrmid";
        case PrivateTag.vqcxaxistrans:
            return "vqcxaxistrans";
        case PrivateTag.vqcxaxistilt:
            return "vqcxaxistilt";
        case PrivateTag.vqcyaxistrans:
            return "vqcyaxistrans";
        case PrivateTag.vqcyaxisswivel:
            return "vqcyaxisswivel";
        case PrivateTag.vqczaxistrans:
            return "vqczaxistrans";
        case PrivateTag.vqczaxisroll:
            return "vqczaxisroll";
        case PrivateTag.ctacconvscale:
            return "ctacconvscale";
        case PrivateTag.imagesetid:
            return "imagesetid";
        case PrivateTag.contrastroute:
            return "contrastroute";
        case PrivateTag.loopfilterparm:
            return "loopfilterparm";
        case PrivateTag.imageoneloc:
            return "imageoneloc";
        case PrivateTag.imageindexloc:
            return "imageindexloc";
        case PrivateTag.framenumber:
            return "framenumber";
        case PrivateTag.listfileexists:
            return "listfileexists";
        case PrivateTag.whereislistframe:
            return "whereislistframe";
        case PrivateTag.irzfilterflag:
            return "irzfilterflag";
        case PrivateTag.irzfilterratio:
            return "irzfilterratio";
        case PrivateTag.numofrrinterval:
            return "numofrrinterval";
        case PrivateTag.numoftimeslots:
            return "numoftimeslots";
        case PrivateTag.numofslices:
            return "numofslices";
        case PrivateTag.numoftimeslices:
            return "numoftimeslices";
        case PrivateTag.unlistedscan:
            return "unlistedscan";
        case PrivateTag.reststress:
            return "reststress";
        case PrivateTag.phasepercentage:
            return "phasepercentage";
        case PrivateTag._0009_xxE4_:
            return "_0009_xxE4_";
        case PrivateTag.leftshift:
            return "leftshift";
        case PrivateTag.posteriorshift:
            return "posteriorshift";
        case PrivateTag.superiorshift:
            return "superiorshift";
        case PrivateTag.acqbinnum:
            return "acqbinnum";
        case PrivateTag.acqbindurpercent:
            return "acqbindurpercent";
        case PrivateTag._0009_xxEA_:
            return "_0009_xxEA_";
        case PrivateTag._0009_xxEB_:
            return "_0009_xxEB_";
        case PrivateTag._0009_xxEC_:
            return "_0009_xxEC_";
        case PrivateTag._0011_xx01_:
            return "_0011_xx01_";
        case PrivateTag._0011_xx18_:
            return "_0011_xx18_";
        case PrivateTag._0013_xx01_:
            return "_0013_xx01_";
        case PrivateTag.correctioncalid:
            return "correctioncalid";
        case PrivateTag.caldatetime:
            return "caldatetime";
        case PrivateTag.caldescription:
            return "caldescription";
        case PrivateTag.caltype:
            return "caltype";
        case PrivateTag.whereiscorr:
            return "whereiscorr";
        case PrivateTag.corrfilesize:
            return "corrfilesize";
        case PrivateTag.scandatetime:
            return "scandatetime";
        case PrivateTag.norm2dcalid:
            return "norm2dcalid";
        case PrivateTag.hospidentifier:
            return "hospidentifier";
        case PrivateTag.wccalid:
            return "wccalid";
        case PrivateTag.calhardware:
            return "calhardware";
        case PrivateTag.coefficients:
            return "coefficients";
        case PrivateTag.activityfactorhr:
            return "activityfactorhr";
        case PrivateTag.activityfactorhs:
            return "activityfactorhs";
        case PrivateTag.activityfactor3d:
            return "activityfactor3d";
        case PrivateTag.measactivity:
            return "measactivity";
        case PrivateTag.measdatetime:
            return "measdatetime";
        case PrivateTag.axialfilter3d:
            return "axialfilter3d";
        case PrivateTag.axialcutoff3d:
            return "axialcutoff3d";
        case PrivateTag.defaultflag:
            return "defaultflag";
        case PrivateTag.wccalrecmethod:
            return "wccalrecmethod";
        case PrivateTag.activityfactor2d:
            return "activityfactor2d";
        case PrivateTag.isotope:
            return "isotope";
        case PrivateTag.rawdatatype:
            return "rawdatatype";
        case PrivateTag.rawdatasize:
            return "rawdatasize";
        case PrivateTag.rawdatablob:
            return "rawdatablob";
        case PrivateTag.CurveID:
            return "CurveID";
        case PrivateTag.CurveCompatibleVersion:
            return "CurveCompatibleVersion";
        case PrivateTag.CurveSoftwareVersion:
            return "CurveSoftwareVersion";
        case PrivateTag.StatisticsType:
            return "StatisticsType";
        case PrivateTag.HowDerived:
            return "HowDerived";
        case PrivateTag.HowDerivedSize:
            return "HowDerivedSize";
        case PrivateTag.Deadtime:
            return "Deadtime";
        case PrivateTag.GraphSequence:
            return "GraphSequence";
        case PrivateTag.GraphID:
            return "GraphID";
        case PrivateTag.GraphCompatibleVersion:
            return "GraphCompatibleVersion";
        case PrivateTag.GraphSoftwareVersion:
            return "GraphSoftwareVersion";
        case PrivateTag.Title:
            return "Title";
        case PrivateTag.GraphDateTime:
            return "GraphDateTime";
        case PrivateTag.GraphDescription:
            return "GraphDescription";
        case PrivateTag.TitleFontName:
            return "TitleFontName";
        case PrivateTag.TitleFontSize:
            return "TitleFontSize";
        case PrivateTag.Footer:
            return "Footer";
        case PrivateTag.FooterFontSize:
            return "FooterFontSize";
        case PrivateTag.ForegroundColor:
            return "ForegroundColor";
        case PrivateTag.BackgroundColor:
            return "BackgroundColor";
        case PrivateTag.GraphBorder:
            return "GraphBorder";
        case PrivateTag.GraphWidth:
            return "GraphWidth";
        case PrivateTag.GraphHeight:
            return "GraphHeight";
        case PrivateTag.Grid:
            return "Grid";
        case PrivateTag.LabelFontName:
            return "LabelFontName";
        case PrivateTag.LabelFontSize:
            return "LabelFontSize";
        case PrivateTag.AxesColor:
            return "AxesColor";
        case PrivateTag.XAxisLabel:
            return "XAxisLabel";
        case PrivateTag.XAxisUnits:
            return "XAxisUnits";
        case PrivateTag.XMajorTics:
            return "XMajorTics";
        case PrivateTag.XAxisMin:
            return "XAxisMin";
        case PrivateTag.XAxisMax:
            return "XAxisMax";
        case PrivateTag.YAxisLabel:
            return "YAxisLabel";
        case PrivateTag.YAxisUnits:
            return "YAxisUnits";
        case PrivateTag.YMajorTics:
            return "YMajorTics";
        case PrivateTag.YAxisMin:
            return "YAxisMin";
        case PrivateTag.YAxisMax:
            return "YAxisMax";
        case PrivateTag.LegendFontName:
            return "LegendFontName";
        case PrivateTag.LegendFontSize:
            return "LegendFontSize";
        case PrivateTag.LegendLocationX:
            return "LegendLocationX";
        case PrivateTag.LegendLocationY:
            return "LegendLocationY";
        case PrivateTag.LegendWidth:
            return "LegendWidth";
        case PrivateTag.LegendHeight:
            return "LegendHeight";
        case PrivateTag.LegendBorder:
            return "LegendBorder";
        case PrivateTag.CurvePresentationSequence:
            return "CurvePresentationSequence";
        case PrivateTag.CurvePresentationID:
            return "CurvePresentationID";
        case PrivateTag.CurvePresentationCompatibleVersion:
            return "CurvePresentationCompatibleVersion";
        case PrivateTag.CurvePresentationSoftwareVersion:
            return "CurvePresentationSoftwareVersion";
        case PrivateTag.CurveLabel:
            return "CurveLabel";
        case PrivateTag.Color:
            return "Color";
        case PrivateTag.LineType:
            return "LineType";
        case PrivateTag.LineWidth:
            return "LineWidth";
        case PrivateTag.PointSymbol:
            return "PointSymbol";
        case PrivateTag.PointSymbolDim:
            return "PointSymbolDim";
        case PrivateTag.PointColor:
            return "PointColor";
        }
        return "";
    }

}
